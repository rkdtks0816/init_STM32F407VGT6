
init_STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c0  080002c8  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c0  080002c0  000012c8  2**0
                  CONTENTS
  4 .ARM          00000000  080002c0  080002c0  000012c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c0  080002c8  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c0  080002c0  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002c4  080002c4  000012c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012c8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002f6  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b9  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000017a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000077  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f8f  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000190f  00000000  00000000  0000386e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000076ab  00000000  00000000  0000517d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c828  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000144  00000000  00000000  0000c86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0000c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002a8 	.word	0x080002a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002a8 	.word	0x080002a8

080001c8 <apInit>:




void apInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d4:	4770      	bx	lr

080001d6 <apMain>:

void apMain(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0
	while(1)
 80001da:	bf00      	nop
 80001dc:	e7fd      	b.n	80001da <apMain+0x4>

080001de <bspInit>:




void bspInit(void)
{
 80001de:	b480      	push	{r7}
 80001e0:	af00      	add	r7, sp, #0

}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	@ (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	@ (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	@ (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	@ (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f821 	bl	8000260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f000 f814 	bl	800024a <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	080002c8 	.word	0x080002c8
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC_IRQHandler>

0800023e <hwInit>:




void hwInit(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	af00      	add	r7, sp, #0
	bspInit();
 8000242:	f7ff ffcc 	bl	80001de <bspInit>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}

0800024a <main>:




int main(void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	hwInit();
 800024e:	f7ff fff6 	bl	800023e <hwInit>
	apInit();
 8000252:	f7ff ffb9 	bl	80001c8 <apInit>

	apMain();
 8000256:	f7ff ffbe 	bl	80001d6 <apMain>

	return 0;
 800025a:	2300      	movs	r3, #0
}
 800025c:	4618      	mov	r0, r3
 800025e:	bd80      	pop	{r7, pc}

08000260 <__libc_init_array>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	4d0d      	ldr	r5, [pc, #52]	@ (8000298 <__libc_init_array+0x38>)
 8000264:	4c0d      	ldr	r4, [pc, #52]	@ (800029c <__libc_init_array+0x3c>)
 8000266:	1b64      	subs	r4, r4, r5
 8000268:	10a4      	asrs	r4, r4, #2
 800026a:	2600      	movs	r6, #0
 800026c:	42a6      	cmp	r6, r4
 800026e:	d109      	bne.n	8000284 <__libc_init_array+0x24>
 8000270:	4d0b      	ldr	r5, [pc, #44]	@ (80002a0 <__libc_init_array+0x40>)
 8000272:	4c0c      	ldr	r4, [pc, #48]	@ (80002a4 <__libc_init_array+0x44>)
 8000274:	f000 f818 	bl	80002a8 <_init>
 8000278:	1b64      	subs	r4, r4, r5
 800027a:	10a4      	asrs	r4, r4, #2
 800027c:	2600      	movs	r6, #0
 800027e:	42a6      	cmp	r6, r4
 8000280:	d105      	bne.n	800028e <__libc_init_array+0x2e>
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f855 3b04 	ldr.w	r3, [r5], #4
 8000288:	4798      	blx	r3
 800028a:	3601      	adds	r6, #1
 800028c:	e7ee      	b.n	800026c <__libc_init_array+0xc>
 800028e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000292:	4798      	blx	r3
 8000294:	3601      	adds	r6, #1
 8000296:	e7f2      	b.n	800027e <__libc_init_array+0x1e>
 8000298:	080002c0 	.word	0x080002c0
 800029c:	080002c0 	.word	0x080002c0
 80002a0:	080002c0 	.word	0x080002c0
 80002a4:	080002c4 	.word	0x080002c4

080002a8 <_init>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr

080002b4 <_fini>:
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	bf00      	nop
 80002b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ba:	bc08      	pop	{r3}
 80002bc:	469e      	mov	lr, r3
 80002be:	4770      	bx	lr
